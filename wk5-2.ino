#include<Wire.h>
#include<SPI.h>
#include<Adafruit_GFX.h>
#include<Adafruit_SSD1306.h>

#define OLED_MOSI 11//d1
#define OLED_CLK 12//D0
#define OLED_DC 13//DC
#define OLED_CS 9//CS
#define OLED_RESET 10//RES
Adafruit_SSD1306 display(OLED_MOSI,OLED_CLK,OLED_DC,OLED_RESET,OLED_CS);
const int ledCount = 10; // the number of LEDs in the bar graph
int ledPins[] = { 2, 3, 4, 5, 6, 7, 8};
#define fsr_pin A0
static const unsigned char PROGMEM Logo[] = {
B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 
  B00000000, B00001111, B11111111, B11111111, B11111111, B11111111, B11110000, B00000000, 
  B00000000, B00111111, B11111111, B11111111, B11111111, B11111111, B11111100, B00000000, 
  B00000000, B01111111, B11111111, B11111111, B11111111, B11111111, B11111110, B00000000, 
  B00000000, B01111111, B11111111, B11111111, B11111111, B11111111, B11111110, B00000000, 
  B00000000, B01111111, B11111111, B11101111, B11111111, B11111111, B11111110, B00000000, 
  B00000000, B11111111, B11111111, B11100000, B11111111, B11111111, B11111111, B00000000, 
  B00000000, B11111111, B11111111, B11100000, B00011111, B11111111, B11111111, B00000000, 
  B00000000, B11111111, B11111111, B11100000, B00000001, B11111111, B11111111, B00000000, 
  B00000000, B11111111, B11111111, B11100000, B00000001, B11111111, B11111111, B00000000, 
  B00000000, B11111111, B11111111, B11100000, B00011111, B11111111, B11111111, B00000000, 
  B00000000, B11111111, B11111111, B11100000, B11111111, B11111111, B11111111, B00000000, 
  B00000000, B01111111, B11111111, B11101111, B11111111, B11111111, B11111110, B00000000, 
  B00000000, B01111111, B11111111, B11111111, B11111111, B11111111, B11111110, B00000000, 
  B00000000, B01111111, B11111111, B11111111, B11111111, B11111111, B11111110, B00000000, 
  B00000000, B00111111, B11111111, B11111111, B11111111, B11111111, B11111100, B00000000, 
  B00000000, B00001111, B11111111, B11111111, B11111111, B11111111, B11110000, B00000000, 
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,  
};
static const unsigned char PROGMEM Logo1[] = {
 B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 
 B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000000, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00001111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11110000, B00000000, B00000000, 
  B00000000, B00000000, B00111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111100, B00000000, B00000000, 
  B00000000, B00000000, B01111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111110, B00000000, B00000000, 
  B00000000, B00000000, B01111111, B11111111, B11111111, B11111111, B11111100, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111110, B00000000, B00000000, 
  B00000000, B00000000, B01111111, B11111111, B11111111, B11111111, B11111100, B00000001, B11111111, B11111111, B11111111, B11111111, B11111111, B11111110, B00000000, B00000000, 
  B00000000, B00000000, B11111111, B11111111, B11111111, B11111111, B11111100, B00000000, B00000011, B11111111, B11111111, B11111111, B11111111, B11111111, B00000000, B00000000, 
  B00000000, B00000000, B11111111, B11111111, B11111111, B11111111, B11111100, B00000000, B00000000, B00000111, B11111111, B11111111, B11111111, B11111111, B00000000, B00000000, 
  B00000000, B00000000, B11111111, B11111111, B11111111, B11111111, B11111100, B00000000, B00000000, B00000111, B11111111, B11111111, B11111111, B11111111, B00000000, B00000000, 
  B00000000, B00000000, B11111111, B11111111, B11111111, B11111111, B11111100, B00000000, B00000011, B11111111, B11111111, B11111111, B11111111, B11111111, B00000000, B00000000, 
  B00000000, B00000000, B01111111, B11111111, B11111111, B11111111, B11111100, B00000001, B11111111, B11111111, B11111111, B11111111, B11111111, B11111110, B00000000, B00000000, 
  B00000000, B00000000, B01111111, B11111111, B11111111, B11111111, B11111100, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111110, B00000000, B00000000, 
  B00000000, B00000000, B01111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111110, B00000000, B00000000, 
  B00000000, B00000000, B00111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111100, B00000000, B00000000, 
  B00000000, B00000000, B00001111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11110000, B00000000, B00000000, 
  B00000000, B00000000, B00000000, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,  
};
void setup() {
  Serial.begin(9600);
  // put your setup code here, to run once:
  display.begin(SSD1306_SWITCHCAPVCC);
  display.clearDisplay();
  display.drawBitmap(30,0,Logo,64,32,WHITE);
  display.display();

  Serial.begin(115200);
  for (int thisLed = 0; thisLed < ledCount; thisLed++) {
    pinMode(ledPins[thisLed], OUTPUT);
    }
}

void loop() {
  // put your main code here, to run repeatedly:
  int fsr_value = analogRead(fsr_pin); // 讀取FSR
  int led_value = map(fsr_value, 0, 1023, 0, 10); // 從0~1023映射到0~10
  for (int thisLed = 0; thisLed < ledCount;
  thisLed++) {
  if (thisLed < led_value) {
    digitalWrite(ledPins[thisLed], HIGH);
    }
    else {
      digitalWrite(ledPins[thisLed], LOW);
      }
   }
   if(led_value>3){
     display.clearDisplay();
     display.drawBitmap(-2,0,Logo1,128 ,32,WHITE);
     display.display();
   }
   else{
    display.clearDisplay();
    display.drawBitmap(30,0,Logo,64,32,WHITE);
    display.display();
   }
}
